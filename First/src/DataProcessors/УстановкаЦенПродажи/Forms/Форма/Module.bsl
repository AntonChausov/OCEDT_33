
// Вариант 1. Через МенеджерЗаписей

//&НаСервере
//Процедура УстановитьНаСервере()
//	
//		МенеджерЗаписи = РегистрыСведений.ЦеныПродажиНоменклатуры.СоздатьМенеджерЗаписи();
//	
//			Для Каждого Строка Из СписокНоменклатуры Цикл
//		
//				МенеджерЗаписи.Номенклатура = Строка.Номенклатура;
//				МенеджерЗаписи.Цена = ФиксированнаяЦена;
//				МенеджерЗаписи.Период = ТекущаяДата();
//				МенеджерЗаписи.Ответственный = ПараметрыСеанса.ТекущийСотрудник;
//		
//				МенеджерЗаписи.Записать();
//		
//			КонецЦикла;
//	
//КонецПроцедуры  


// Вариант 2. Через НаборЗаписей

&НаСервере
Процедура УстановитьНаСервере()
	
	ВсяНоменклатураКОбработке = НоменклатураКОбработке();
	
	// Фиксированная цена
	Если ВариантУстановки = 0 Тогда
		
		Для Каждого Строка Из СписокНоменклатуры Цикл

			НаборЗаписей = РегистрыСведений.ЦеныПродажиНоменклатуры.СоздатьНаборЗаписей();
            НоваяЗапись = НаборЗаписей.Добавить();
			
			НоваяЗапись.Номенклатура = Строка.Номенклатура;
			НоваяЗапись.Цена = ФиксированнаяЦена;
			НоваяЗапись.Период = ТекущаяДата();
			НоваяЗапись.Ответственный = ПараметрыСеанса.ТекущийСотрудник;
			
			НаборЗаписей.Записать(Ложь);
		
		КонецЦикла;               
		
	// Удаление цен
	ИначеЕсли ВариантУстановки = 1 Тогда
;
		Для Каждого Строка Из СписокНоменклатуры Цикл

		// Нам необходимо очистить все записи регистра по указанной номенклатуре
		// Создадим набор записей с отбором по номенклатуре и, не прочитывая,
		// запишем его (так, будет записан пустой набор с отбором по номенклатуре)
		
		// Только после копирования из примера понял, что строку ниже "СоздатьНаборЗаписей()" надо вызывать каждый раз, а не в самом начале 1 раз
		// Иначе у меня все удалялось, все цены по всем номенклатурам
			НаборЗаписей = РегистрыСведений.ЦеныПродажиНоменклатуры.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Номенклатура.Установить(Строка.Номенклатура);    
			НаборЗаписей.Записать();
			
		КонецЦикла; 
		
	// Процент от текущей цены
	ИначеЕсли ВариантУстановки = 2 Тогда
		Сообщить("0 ДатаАктуальности = " + ДатаАктуальности);
		
		// Неправильно прочитал задание: нужно не менять цену, а создавать новую запись
	  //  Для Каждого Строка Из СписокНоменклатуры Цикл
	  //
	  //  	НаборЗаписей = РегистрыСведений.ЦеныПродажиНоменклатуры.СоздатьНаборЗаписей();
	  //  	НаборЗаписей.Отбор.Номенклатура.Установить(Строка.Номенклатура);    
	  //  	
	  //  	НаборЗаписей.Прочитать();
	  //  	
	  //  	Для Каждого Запись Из НаборЗаписей Цикл
	  //  		
	  //  		Запись.Цена = Запись.Цена + (Запись.Цена * (ПроцентОтТекущейЦены / 100));
	  //  		
	  //  	КонецЦикла;
	  //  	
	  //  	НаборЗаписей.Записать();
	  //  
	  //  КонецЦикла;    			
	  
	  
		// Если заполнили массив номенклатуры
		Если ЗначениеЗаполнено(ВсяНоменклатураКОбработке) Тогда
		
			Для Каждого ЭлементМассива Из ВсяНоменклатураКОбработке Цикл
			
		    	// Вычитываем весь список цен номенклатуры по строке в РегистреСведений
				НаборЗаписей = РегистрыСведений.ЦеныПродажиНоменклатуры.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Номенклатура.Установить(ЭлементМассива);    
				НаборЗаписей.Прочитать();
				
				//////////////Сообщить(ЭлементМассива);
			
				// Цикл поиска последней записи
				
				// Мой колхоз отключаем и переводим в нормальную функцию  !!!!!!!!!!
				//Для Каждого Запись Из НаборЗаписей Цикл    
				//	
				//	// Перед каждым элементом обнуляем дату
				//    ПоследняяДата = Дата(1, 1, 1);
				//	// Заполняем дату и цену крайней записью
				//	Если ПоследняяДата < Запись.Период Тогда
				//	 	ПоследняяДата = Запись.Период;
				//	 	ПоследняяЦена = Запись.Цена + (Запись.Цена * (ПроцентОтТекущейЦены / 100));
				//	КонецЕсли;
				//
				//КонецЦикла;
				
				ПоследняяЦена = ПолучитьПоследнююЦенуНоменклатуры(ДатаАктуальности, ЭлементМассива);
				ПоследняяЦена = ПоследняяЦена + (ПоследняяЦена * (ПроцентОтТекущейЦены / 100));
				Сообщить("1 ДатаАктуальности = " + ДатаАктуальности);

					// Меняем цену найденной записи в РегистрыСведений.ЦеныПродажиНоменклатуры
					Если ЗначениеЗаполнено(ПоследняяЦена) Тогда
						МенеджерЗаписи = РегистрыСведений.ЦеныПродажиНоменклатуры.СоздатьМенеджерЗаписи();
		
						МенеджерЗаписи.Номенклатура = ЭлементМассива;
						МенеджерЗаписи.Цена = ПоследняяЦена;
						МенеджерЗаписи.Период = ТекущаяДата();
						МенеджерЗаписи.Ответственный = ПараметрыСеанса.ТекущийСотрудник;
		
						МенеджерЗаписи.Записать();
					Иначе Сообщить("Запись не найдена");
					КонецЕсли;
					
			КонецЦикла;
				
			Возврат;
					
		//Иначе    // почему то и без Иначе работает
		//	
		//	// Если заполнили список номенклатуры вручную
		//	Для Каждого Строка Из СписокНоменклатуры Цикл

		//    	// Вычитываем весь список цен номенклатуры по строке в РегистреСведений
		//		НаборЗаписей = РегистрыСведений.ЦеныПродажиНоменклатуры.СоздатьНаборЗаписей();
		//		НаборЗаписей.Отбор.Номенклатура.Установить(Строка.Номенклатура);    
		//		НаборЗаписей.Прочитать();
		//	
		//		// Цикл поиска последней записи
		//		
		//		// Мой колхоз отключаем и переводим в нормальную функцию  !!!!!!!!!!
		//		//Для Каждого Запись Из НаборЗаписей Цикл
		//		//
		//		//	Если ПоследняяДата < Запись.Период Тогда
		//		//	 	ПоследняяДата = Запись.Период;
		//		//	 	ПоследняяЦена = Запись.Цена + (Запись.Цена * (ПроцентОтТекущейЦены / 100));
		//		//	КонецЕсли;
		//		//
		//		//КонецЦикла;
		//		
		//		ПоследняяЦена = ПолучитьПоследнююЦенуНоменклатуры(ДатаАктуальности, Строка.Номенклатура);
		//		ПоследняяЦена = ПоследняяЦена + (ПоследняяЦена * (ПроцентОтТекущейЦены / 100));
		//		Сообщить("2 ДатаАктуальности = " + ДатаАктуальности);
		//		
		//			// Меняем цену найденной записи
		//			Если ЗначениеЗаполнено(ПоследняяЦена) Тогда
		//				МенеджерЗаписи = РегистрыСведений.ЦеныПродажиНоменклатуры.СоздатьМенеджерЗаписи();
		//
		//				МенеджерЗаписи.Номенклатура = Строка.Номенклатура;
		//				МенеджерЗаписи.Цена = ПоследняяЦена;
		//				МенеджерЗаписи.Период = ТекущаяДата();
		//				МенеджерЗаписи.Ответственный = ПараметрыСеанса.ТекущийСотрудник;
		//
		//				МенеджерЗаписи.Записать();
		//			Иначе Сообщить("Запись не найдена");
		//			КонецЕсли;
		//	 КонецЦикла;
			 
		 КонецЕсли;
		
	  
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция ПолучитьПоследнююЦенуНоменклатуры(ДатаАктуальности, Номенклатура)

	// Готовим отбор для регистра
	Отбор = Новый Структура;
	Отбор.Вставить("Номенклатура", Номенклатура);
	
	// Читаем запись
	// Не устанавливаем отбор по дате, чтобы получить самую последнюю запись
	ПоследняяЦена = РегистрыСведений.ЦеныПродажиНоменклатуры.ПолучитьПоследнее(ДатаАктуальности, Отбор);
	
	// Возвращаем цену для дальнейшего использования в алгоритме	
	Возврат ПоследняяЦена.Цена;

КонецФункции


&НаКлиенте
Процедура Установить(Команда)
	УстановитьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВариантУстановкиПриИзменении(Элемент)
	
	// Фиксированная цена
	Если ВариантУстановки = 0 Тогда
		Элементы.ФиксированнаяЦена.Доступность = Истина;
		Элементы.ПроцентОтТекущейЦены.Доступность = Ложь;
		Элементы.ДатаАктуальности.Доступность = Ложь;
	// Удаление цен
	ИначеЕсли ВариантУстановки = 1 Тогда
		Элементы.ФиксированнаяЦена.Доступность = Ложь;
		Элементы.ПроцентОтТекущейЦены.Доступность = Ложь;
		Элементы.ДатаАктуальности.Доступность = Ложь;
	// Процент от текущей цены
	ИначеЕсли ВариантУстановки = 2 Тогда
		Элементы.ФиксированнаяЦена.Доступность = Ложь;
		Элементы.ПроцентОтТекущейЦены.Доступность = Истина;
		Элементы.ДатаАктуальности.Доступность = Истина;
		ДатаАктуальности = Формат(ТекущаяДата(), "ДЛФ=DT");
	КонецЕсли;
	
	// Более короткий код из задания
	// Элементы.ФиксированнаяЦена.Доступность = (ВариантУстановки = 0);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Фиксированная цена
	Если ВариантУстановки = 0 Тогда
		Элементы.ФиксированнаяЦена.Доступность = Истина;
		Элементы.ПроцентОтТекущейЦены.Доступность = Ложь;
		Элементы.ДатаАктуальности.Доступность = Ложь;
	// Удаление цен
	ИначеЕсли ВариантУстановки = 1 Тогда
		Элементы.ФиксированнаяЦена.Доступность = Ложь;
		Элементы.ПроцентОтТекущейЦены.Доступность = Ложь;
		Элементы.ДатаАктуальности.Доступность = Ложь;
	// Процент от текущей цены
	ИначеЕсли ВариантУстановки = 2 Тогда
		Элементы.ФиксированнаяЦена.Доступность = Ложь;
		Элементы.ПроцентОтТекущейЦены.Доступность = Истина;
		Элементы.ДатаАктуальности.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)     
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
	//ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
	
	// установите другие необходимые параметры
    ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, Элементы.СписокНоменклатуры);

КонецПроцедуры


&НаКлиенте
Процедура СписокНоменклатурыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Строка = СписокНоменклатуры.Добавить();
	Строка.Номенклатура = ВыбранноеЗначение;
	
КонецПроцедуры


&НаСервере
Функция НоменклатураКОбработке()

	ВсяНоменклатураКОбработке = Новый Массив;
	Для Каждого СтрокаСписка Из СписокНоменклатуры Цикл
		
		НоменклатураВСтроке = СтрокаСписка.Номенклатура;
		Если НоменклатураВСтроке.ЭтоГруппа Тогда
			ДополнитьМассивЭлементамиВложеннымиВГруппу(НоменклатураВСтроке, ВсяНоменклатураКОбработке);
		Иначе
			ВсяНоменклатураКОбработке.Добавить(НоменклатураВСтроке);
		КонецЕсли;
		
	КонецЦикла;

	Возврат ВсяНоменклатураКОбработке;

КонецФункции

Процедура ДополнитьМассивЭлементамиВложеннымиВГруппу(ГруппаНоменклатуры, ВсяНоменклатураКОбработке)

	Выборка = Справочники.Номенклатура.Выбрать(ГруппаНоменклатуры); // Отбор по Родителю
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоГруппа Тогда                                                     
			// Используем рекурсию, чтобы вызвать из процедуры саму себя.
			// Таким образом, нам не важна глубина иерархии, будут пройдены все уровни.
			ДополнитьМассивЭлементамиВложеннымиВГруппу(Выборка.Ссылка, ВсяНоменклатураКОбработке); 
		Иначе
			ВсяНоменклатураКОбработке.Добавить(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры



